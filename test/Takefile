module.exports = async (take) => {
  take.options.shell.printStdout = true;
  take.options.shell.printStderr = true;
  take.options.shell.echo = true;
  // take.options.emojis = false;

  await take.exec('echo init');

  return {
    target1: {
      desc: 'target 1',
      async execute() {
        console.log(this.desc, arguments);
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log(this.desc, 'timeout');
      }
    },
    target2: {
      desc: 'target 2',
      deps: 'target1',
      async execute() {
        console.log(this.desc);
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log(this.desc, 'timeout');
      }
    },
    target3: {
      desc: 'target 3',
      deps: ['target1', 'target2'],
      execute() {
        console.log(this.desc);
      }
    },
    target4: {
      desc: 'target 4',
      deps: ['target1', 'target2'],
      parallelDeps: true,
      execute() {
        console.log(this.desc);
      }
    },
    target5: {
      desc: 'target 5',
      execute() {
        console.log(this.desc);
      },
      children: {
        child1: {
          desc: 'target 5 child 1',
          execute() {
            console.log(this.desc, this);
          },
          children: {
            test1: {
              desc: 'target5:child1:test1',
            },
            test2: {
              desc: 'target5:child1:test2'
            }
          }
        },
        test: {
          desc: 'target5:test'
        }
      }
    },
    target6: {
      execute() {
        console.log(take);
      },
      children: {
        child1: {
          children: {
            test1: {
              desc: 'target6:child1:test1'
            },
            test2: {
              desc: 'target6:child1:test2'
            }
          }
        }
      }
    },
    default: {
      execute() {
        console.log('default task');
      }
    },
    target7: {
      deps: 'target8',
      execute() {
        console.log(this.desc);
      }
    },
    target8: {
      deps: 'target7',
      execute() {
        console.log(this.desc);
      }
    },
    echo: {
      async execute(...args) {
        await take.shell('echo test 1');
        await take.execo('echo test 2');
        await take.shell('echo test', ['3'], { spawn: { shell: true } });
        console.log(args);
      },
      children: {
        test: {
          depParent: true
        }
      }
    },
    echo2: {
      deps: 'echo[test,dep]'
    },
    'echo-test': {
      async execute() {
        take.options.shell.echo = true;
        await take.exec('echo', 'exec echo=true');
        await take.execo('echo', 'execo echo=true');
        await take.execs('echo', 'execs echo=true');
        take.options.shell.echo = false;
        await take.exec('echo', 'exec echo=false');
        await take.execo('echo', 'execo echo=false');
        await take.execs('echo', 'execs echo=false');
      }
    },
    crash: {
      execute() {
        throw new Error('test error');
      },
      children: {
        take: {
          execute() {
            take.error('test error', new Error('internal error'));
          }
        },
        test: {
          desc: 'crash:test'
        }
      }
    }
  };
};
